//#ifndef JOBLOADER_HPP
//#define JOBLOADER_HPP

//#include <QDir>
//#include <QString>

//#include "../sdk/DB/sqlitedb.hpp"
//#include "../job/inspectiondata.hpp"
//#include "./Datagenerator.hpp"

//namespace App
//{
//    //当目录下没有检测程式文件,则随机生成,此变量为随机生成检测对象的数量
//    #define OBJ_CNT 50

//    /**
//     *  @brief MainWindow
//     *         1.扫面目录下的检测程式,并将其显示在终端上
//     *         2.读取检测程式文件的数据,将数据显示在终端上并将数据写入到xml文件中
//     *         3.如果目录下没有检测程式,则自动生成一笔检测程式数据
//     *  @author bob
//     *  @version 1.00 2017-11-29 bob
//     *                note:create it
//     */
//    class MainWindow
//    {
//    public:
//        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//        //constructor & deconstructor
//        //初始化成员变量
//        MainWindow();
//        //释放存放检测对象的存储空间
//        ~MainWindow();
//        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//        //>>>----------------------------------------------------------------------------------------------------------------------------
//        // get & set functions
//        //设置 & 获取检测数据
//        void setInspectionData(Job::InspectionData inspectionData)
//        {
//            this->m_inspectionData = inspectionData;
//        }
//        Job::InspectionData inspectionData(){return this->m_inspectionData;}
//        //>>>----------------------------------------------------------------------------------------------------------------------------

//        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//        //成员函数
//        /*
//        *  @brief  loadJob
//        *          加载检测程式(文件)
//        *            1.如果目录中没有检测程式文件,则随机生成一个检测程式,将随机生成数据
//        *            2.如果目录中有检测程式文件,则将检测程式文件显示在终端上,供用户选择
//        *              根据选择的检测程式文件读取检测程式中的数据
//        *  @param  N/A
//        *  @return N/A
//        */
//        void loadJob(QString path);

//        /*
//        *  @brief   writeInspectionDataToJob
//        *           将检测程式的信息写入至指定路径的检测程式文件中,具体信息如下
//        *              1.检测程式的版本,最后依次编辑时间
//        *              2.检测程式对应基板的名称,原点x ,y坐标,及长和宽
//        *              3.基板中所有检查对象的名称,x,y轴坐标,及长和宽及角度
//        *  @param   pInspectionData: 需要写入到检测程式数据的地址
//        *                        (即指向inspectionData的头地址)
//        *           pSqlite : 写入检测程式文件的地址(即将数据写入已经打开的检测程式)
//        *  @return  N/A
//        */
//        void writeInspectionDataToJob(InspectionData *pInspectionData,
//                                      SSDK::DB::SqliteDB * pSqlite);

//        /*
//        *  @brief  readInspectionDataFromJob
//        *          从检测程式中读取数据,具体数据信息如下:
//        *             1.检测程式的版本,最后依次编辑时间
//        *             2.检测程式对应基板的名称,原点x ,y坐标,及长和宽
//        *             3.基板中所有检查对象的名称,x,y轴坐标,及长和宽及角度
//        *  @param   pInspectionData : 指向存放检测程式数据的头指针
//        *           pSqlite : 检测程式文件的地址(即读取已打开的检测程式中的数据)
//        *  @return  N/A
//        */
//        void readInspectionDataFromJob(InspectionData * pInspectionData,
//                                       SSDK::DB::SqliteDB * pSqlite);

//        /*
//        *  @brief  convertJobToV2
//        *          将V1版本的检测程式转换成V2
//        *            1.将检测程式的版本信息改写为V2
//        *            2.将所有的检测对象添加angle,并设置为默认值0
//        *  @param  sqlite:需要转换成V2版本的检测程式
//        *  @return N/A
//        */
//        void convertJobToV2(SSDK::DB::SqliteDB * pSqlite);
//        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//    private:
//        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//        //成员变量
//        Job::InspectionData m_inspectionData;       //实例化一个inspectionData对象
//        //存放检测对象的数据的数组,大小根据检测程式中检测对象个数来开辟空间
//        Job::MeasuredObj * m_pMeasuredObj;
//        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//    };
//}  //End of namespace App

//#endif // JOBLOADER_HPP
